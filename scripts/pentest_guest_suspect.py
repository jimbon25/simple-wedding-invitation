#!/usr/bin/env python3
"""
Pentest script for wedding invitation backend (Vercel & Netlify)
- Test all suspect guest scenarios: VPN/proxy, non-Indonesia, suspicious User-Agent, query param, etc.
- Works for both Vercel and Netlify endpoints.
- Prints result for each test (status, response, suspect detection).
"""
import requests
import sys
import time

# CONFIGURATION

# ENDPOINTS & KEYS
VERCEL_URL = "https://your-site-url.vercel.app/api/guest-count or https://your-site-url.com/api/guest-count"
NETLIFY_URL = "https://your-site-url.netlify.app/.netlify/functions/guest-count or https://your-site-url.com/.netlify/functions/guest-count"
API_KEY = "your_guest_api_key"
PENTEST_KEY = "your_pentest_rate_key"
# List of test cases for suspect detection
test_cases = [
    {
        "name": "VPN/Proxy ASN (DigitalOcean)",
        "headers": {
            "x-forwarded-for": "167.99.1.1",  # DigitalOcean IP
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        },
        "desc": "Should be blocked as VPN/proxy (ASN 14061)"
    },
    {
        "name": "Non-Indonesia Country (SG)",
        "headers": {
            "x-forwarded-for": "139.99.1.1",  # Singapore IP
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        },
        "desc": "Should be blocked as non-allowed country"
    },
    {
        "name": "Suspicious User-Agent (curl)",
        "headers": {
            "x-forwarded-for": "36.72.1.1",  # Indonesia IP
            "user-agent": "curl/7.68.0"
        },
        "desc": "Should be blocked as suspicious User-Agent"
    },
    {
        "name": "Suspicious Query Param (SQLi)",
        "headers": {
            "x-forwarded-for": "36.72.1.1",  # Indonesia IP
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        },
        "params": {"to": "admin' OR 1=1 --"},
        "desc": "Should be blocked as suspicious query param (SQLi)"
    },
    {
        "name": "Normal Indonesia User",
        "headers": {
            "x-forwarded-for": "36.72.1.1",  # Indonesia IP
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        },
        "desc": "Should be allowed (not suspect)"
    },
    {
        "name": "Bot User-Agent",
        "headers": {
            "x-forwarded-for": "36.72.1.1",
            "user-agent": "Googlebot/2.1 (+http://www.google.com/bot.html)"
        },
        "desc": "Should be flagged as bot (may or may not be blocked)"
    },
    {
        "name": "VPN/Proxy ASN (Cloudflare)",
        "headers": {
            "x-forwarded-for": "104.16.0.1",  # Cloudflare IP
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        },
        "desc": "Should be blocked as VPN/proxy (ASN 13335)"
    },
]

def test_endpoint(name, url, headers, params=None, desc=None, use_pentest_key=False):
    print(f"\n=== {name} ===")
    print(f"Endpoint: {url}")
    if desc:
        print(f"Test: {desc}")
    headers = dict(headers)
    headers["x-api-key"] = PENTEST_KEY if use_pentest_key else API_KEY
    is_netlify = ".netlify/functions" in url
    try:
        if is_netlify:
            json_data = params if params else {}
            resp = requests.post(url, headers=headers, json=json_data, timeout=10)
        else:
            resp = requests.get(url, headers=headers, params=params, timeout=10)
        print(f"Status: {resp.status_code}")
        ct = resp.headers.get('content-type', '')
        if 'application/json' in ct:
            print("Response:", resp.json())
        else:
            print("Response:", resp.text.strip())
    except Exception as e:
        print(f"Error: {e}")

def main():
    print("\n--- Testing Vercel Endpoint ---")
    for case in test_cases:
        # Use pentest key for all suspect tests except normal user
        use_pentest = not ("Normal Indonesia User" in case["name"])
        test_endpoint(case["name"], VERCEL_URL, case["headers"], case.get("params"), case.get("desc"), use_pentest_key=use_pentest)
        time.sleep(1)
    print("\n--- Testing Netlify Endpoint ---")
    for case in test_cases:
        use_pentest = not ("Normal Indonesia User" in case["name"])
        test_endpoint(case["name"], NETLIFY_URL, case["headers"], case.get("params"), case.get("desc"), use_pentest_key=use_pentest)
        time.sleep(1)

if __name__ == "__main__":
    main()
